//============================================================================
// Name        : 16236.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <queue>
using namespace std;

struct coor{
	int x;
	int y;
	int distance;
};

bool in_boundary(coor pos, int N){
	if (pos.x >= 0 && pos.x < N && pos.y >= 0 && pos.y < N)
		return true;

	return false;
}

// 보드 안에 있어야 되고, 방문하지 않았어야 되고, 먹이 크기가 같거나 작아야
bool can_go(coor pos, int N, int visited[20][20], int whale_size, int food_size){
	if (in_boundary(pos, N) && !visited[pos.y][pos.x] && (food_size <= whale_size))
		return true;
	else
		return false;
}

void init_visited(int N, int visited[20][20]){
	for(int i = 0 ; i < N; i++)
		for(int j = 0; j < N; j++)
			visited[i][j] = 0;
}

int new_x[4] = {0, -1, 1, 0};
int new_y[4] = {-1, 0, 0, 1};

int main() {

	int board_size;
	int board[20][20];

	int c; // 임시로 글씨를 받기위한 버퍼

	coor init_whale; //whale 최초 위
	int whale_size = 2;
	int num_eat = 0;

	//보드 사이즈 받기
	cin >> board_size;

	for (int y = 0; y < board_size; y++){
		for(int x = 0; x <board_size; x++){

			cin >> c;
			board[y][x] = c;

			// 상어 최초 위치 받기
			if (c == 9){
				init_whale.x = x;
				init_whale.y = y;
				init_whale.distance = 0;
				board[y][x] = 0;
			}

		}
	}

	int ans = 0;
	//더 이상 갈 곳이 없을 때에 1로 바꿔서 종료 시그널로 사
	int no_more = 1;
	queue<coor> BFS_Q;

	//가장 가까운 먹이의 위치를 저장함(x, y, 거리)
	coor nearest_food = init_whale;
	//현재 고래의 위치를 저장
	coor current_pos;

	while(1){

		while(!BFS_Q.empty())
			BFS_Q.pop();

		int visited[20][20];
		init_visited(board_size, visited);
		current_pos = nearest_food;
		current_pos.distance = 0;
		no_more = 1;

		BFS_Q.push(current_pos);

		while(!BFS_Q.empty()){

			coor candidate = BFS_Q.front();
			BFS_Q.pop();
			if (visited[candidate.y][candidate.x])
				continue;
			else
				visited[candidate.y][candidate.x] = 1;

			//해당 위치에 먹이가 고래의 크기보다 작으면 먹는다.
			if(board[candidate.y][candidate.x] < whale_size
					&& board[candidate.y][candidate.x] > 0){

				//cout << "y: " << candidate.y << " x: " << candidate.x << " " << candidate.distance << endl;
				board[candidate.y][candidate.x] = 0;
				num_eat += 1;

				//먹었는데 커져야 된다면 커진다.
				if(num_eat == whale_size){
					whale_size +=1;
					//cout << whale_size << endl;
					num_eat = 0;
				}

				//거리를 더하고, current_pos 업데이
				ans += candidate.distance;
				nearest_food = candidate;

				//먹었다면 길 찾기 종료
				no_more = 0;
				break;
			}

			//새로 갈 수 있는 곳 추가
			for (int i = 0; i < 4; i++){
				coor temp;
				temp = candidate;
				temp.x += new_x[i];
				temp.y += new_y[i];
				temp.distance += 1;
				if(can_go(temp, board_size, visited, whale_size, board[temp.y][temp.x]))
					BFS_Q.push(temp);
			}

		}

		if (no_more)
			break;
	}

	cout << ans;

	return 0;
}

